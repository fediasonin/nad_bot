import requests
import logging
from threading import Timer
from urllib3.exceptions import InsecureRequestWarning
import config

logging.basicConfig(level=logging.INFO)

server_down_notified = False
last_status = None
last_problems_keys = set()

STATUS_EMOJIS = {
    "red": "üî¥",
    "yellow": "üü°",
    "green": "üü¢",
    "unknown": "‚ùî"
}



class PTNADClient:
    def __init__(self, base_url: str, username: str, password: str):
        self.base_url = base_url.rstrip('/')
        self.username = username
        self.password = password




        self.session = requests.Session()
        self.session.verify = False
        requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

        self.headers = {}
        self.csrf_token = None

    def authenticate(self):
        auth_url = f"{self.base_url}/auth/login"
        try:
            response = self.session.post(auth_url, json={
                "username": self.username,
                "password": self.password
            })
            if response.status_code == 200:
                logging.info("–£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è.")
                if 'csrftoken' in self.session.cookies:
                    self.csrf_token = self.session.cookies['csrftoken']
                    self.headers["X-CSRFToken"] = self.csrf_token
                    logging.info("CSRF-—Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏.")
                else:
                    logging.warning("CSRF-—Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
                return True
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.status_code} - {response.text}")
                return False
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return False

    def get_monitoring_status(self) -> dict:
        url = f"{self.base_url}/monitoring/status"
        try:
            response = self.session.get(url, headers=self.headers)

            if response.status_code == 200:
                return response.json()

            elif response.status_code in (401, 403):
                logging.warning(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–¥ {response.status_code}, –ø—Ä–æ–±—É–µ–º –∑–∞–Ω–æ–≤–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è...")

                if self.authenticate():
                    response2 = self.session.get(url, headers=self.headers)
                    if response2.status_code == 200:
                        return response2.json()
                    else:
                        logging.error(
                            f"–û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response2.status_code} - {response2.text}")
                        return {}
                else:
                    logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ 401/403.")
                    return {}

            else:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {url}: {response.status_code} - {response.text}")
                return {}

        except Exception as e:
            logging.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}: {e}")
            return {}


def problem_signature(problem: dict) -> tuple:
    return (
        problem.get("status", ""),
        problem.get("template", ""),
        str(problem.get("vars", {}))
    )


def send_telegram_message(message: str):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º.
    """
    url = f"https://api.telegram.org/bot{config.TELEGRAM_TOKEN}/sendMessage"
    data = {"chat_id": config.CHAT_ID, "text": message}
    try:
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {message}")
        response = requests.post(url, data=data)
        if response.status_code == 200:
            logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram. –ö–æ–¥: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¢–µ–ª–µ–≥—Ä–∞–º: {e}")




def monitor():
    global last_problems_keys, last_status, server_down_notified

    logging.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    monitoring_data = nad_client.get_monitoring_status()
    logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {monitoring_data}")

    if not monitoring_data:
        if not server_down_notified:
            logging.warning("–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            send_telegram_message("‚ùó –°–µ—Ä–≤–µ—Ä PT NAD –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            server_down_notified = True
        last_problems_keys = set()
        last_status = None
    else:
        if server_down_notified:
            logging.info("–°–µ—Ä–≤–µ—Ä —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            send_telegram_message("‚úÖ –°–µ—Ä–≤–µ—Ä PT NAD —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω.")
            server_down_notified = False

        current_status = monitoring_data.get("status", "unknown")
        problems = monitoring_data.get("problems", [])
        new_problems_keys = {problem_signature(p) for p in problems}
        
        logging.info(f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {current_status}, –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {last_status}")
        logging.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º: {len(problems)}")

        if current_status != last_status or new_problems_keys != last_problems_keys:
            status_emoji = STATUS_EMOJIS.get(current_status, "‚ùî")
            logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º, –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

            if current_status in ("red", "yellow"):
                message_lines = [f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å PT NAD: {status_emoji}"]
                if problems:
                    message_lines.append("–°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º:")
                    for idx, problem in enumerate(problems, start=1):
                        p_status = problem.get("status", "")
                        template = problem.get("template", "")
                        problem_emoji = STATUS_EMOJIS.get(p_status, "‚ùî")
                        message_lines.append(f" {idx}. –£—Ä–æ–≤–µ–Ω—å: {problem_emoji}, –û–ø–∏—Å–∞–Ω–∏–µ: {template}")
                else:
                    message_lines.append("–°—Ç–∞—Ç—É—Å –Ω–µ GREEN, –Ω–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º –ø—É—Å—Ç.")
                send_telegram_message("\n".join(message_lines))

            last_status = current_status
            last_problems_keys = new_problems_keys
        else:
            logging.info("–ò–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å—Ç–∞—Ç—É—Å–µ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

    logging.info(f"–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {config.CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥")
    Timer(config.CHECK_INTERVAL, monitor).start()

def main():
    global nad_client
    nad_client = PTNADClient(config.BASE_URL, config.USERNAME, config.PASSWORD)
    nad_client.authenticate()
    monitor()


if __name__ == "__main__":
    main()
